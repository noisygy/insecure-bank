# POC of idir caching for PFI on ephemerial build agents with a traditional, non-CNC Coverity deployment
name: coverity-pfi

on:
  push:
    branches: [ main, master, stage, release ]
  pull_request:
    branches: [ main, master, stage, release ]
  workflow_dispatch:

jobs:
  coverity:
    runs-on: ubuntu-latest

    env:
      #COVERITY_URL: ${{ vars.COVERITY_URL }}
      COVERITY_URL: https://coverity-aws.chuckaude.com
      COV_USER: ${{ secrets.COVERITY_USER }}
      COVERITY_PASSPHRASE: ${{ secrets.COVERITY_PASSPHRASE }}
      COVERITY_PROJECT: ${{ github.event.repository.name }}
      COVERITY_STREAM: ${{ github.event.repository.name }}-${{ github.ref_name }}
      TOOLKIT: cov-analysis-linux64-2023.3.0

    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
    - name: Setup Java JDK
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: microsoft
        cache: maven

    # designate the Coverity idir as something to cache, for more details see:
    # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
    - name: Cache Coverity iDir
      uses: actions/cache@v3
      id: cache-coverity
      with:
        path: idir
        key: ${{ github.event.repository.name }}-${{ github.ref_name }}-${{ runner.os }}

    # download the full client and license from the Coverity server
    - name: Coverity Download
      run: |
        curl -fLsS --user $COV_USER:$COVERITY_PASSPHRASE $COVERITY_URL/downloadFile.htm?fn=$TOOLKIT.tar.gz | tar -C $RUNNER_TEMP -xzf -
        curl -fLsS --user $COV_USER:$COVERITY_PASSPHRASE -o $RUNNER_TEMP/$TOOLKIT/bin/license.dat $COVERITY_URL/downloadFile.htm?fn=license.dat

    # single step scan, disabled to get more granular timing, see COVCLI-2238
    - name: Coverity Full Scan - Scan
      if: ${{ github.event_name != 'pull_request' && false }}
      run: |
        $RUNNER_TEMP/$TOOLKIT/bin/coverity scan -o commit.connect.url=$COVERITY_URL -o commit.connect.stream=$COVERITY_STREAM

    - name: Coverity Full Scan - Capture
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        $RUNNER_TEMP/$TOOLKIT/bin/coverity capture

    - name: Coverity Full Scan - Analyze
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        $RUNNER_TEMP/$TOOLKIT/bin/coverity analyze

    - name: Coverity Full Scan - Commit
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        $RUNNER_TEMP/$TOOLKIT/bin/coverity commit -o commit.connect.url=$COVERITY_URL -o commit.connect.stream=$COVERITY_STREAM

    # no-op quality-gate, just pretty print to console
    - name: Coverity Quality Gate
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        curl -fLsS --user $COV_USER:$COVERITY_PASSPHRASE $COVERITY_URL/api/viewContents/issues/v1/Outstanding%20Issues?projectId=$COVERITY_PROJECT > results.json
        if [ $(cat results.json | jq .viewContentsV1.totalRows) -ne 0 ]; then cat results.json | jq .viewContentsV1.rows; fi

    - name: Get Changed Files
      uses: jitterbit/get-changed-files@v1
      id: changeset
      if: ${{ github.event_name == 'pull_request' }}

    # HFI scan of changeset, disabled, to be replaced with PFI
    - name: Coverity PR Scan
      if: ${{ github.event_name == 'pull_request' && steps.changeset.outputs.added_modified != '' && false }}
      run: |
        export PATH=$PATH:$RUNNER_TEMP/$TOOLKIT/bin
        cov-run-desktop --dir idir --url $COVERITY_URL --stream $COVERITY_PROJECT-$GITHUB_BASE_REF --build mvn -B -DskipTests package
        cov-run-desktop --dir idir --url $COVERITY_URL --stream $COVERITY_PROJECT-$GITHUB_BASE_REF --present-in-reference false \
          --ignore-uncapturable-inputs true --exit1-if-defects true ${{ steps.changeset.outputs.added_modified }}
